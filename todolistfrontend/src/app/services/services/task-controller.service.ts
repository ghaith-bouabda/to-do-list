/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTask } from '../fn/task-controller/create-task';
import { CreateTask$Params } from '../fn/task-controller/create-task';
import { deleteTask } from '../fn/task-controller/delete-task';
import { DeleteTask$Params } from '../fn/task-controller/delete-task';
import { getAllTasksbyuser } from '../fn/task-controller/get-all-tasksbyuser';
import { GetAllTasksbyuser$Params } from '../fn/task-controller/get-all-tasksbyuser';
import { Task } from '../models/task';
import { updateTask } from '../fn/task-controller/update-task';
import { UpdateTask$Params } from '../fn/task-controller/update-task';

@Injectable({ providedIn: 'root' })
export class TaskControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTask()` */
  static readonly UpdateTaskPath = '/api/tasks/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask$Response(params: UpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return updateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask(params: UpdateTask$Params, context?: HttpContext): Observable<Task> {
    return this.updateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `deleteTask()` */
  static readonly DeleteTaskPath = '/api/tasks/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask$Response(params: DeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask(params: DeleteTask$Params, context?: HttpContext): Observable<void> {
    return this.deleteTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createTask()` */
  static readonly CreateTaskPath = '/api/tasks/createtask';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask$Response(params: CreateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return createTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask(params: CreateTask$Params, context?: HttpContext): Observable<Task> {
    return this.createTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `getAllTasksbyuser()` */
  static readonly GetAllTasksbyuserPath = '/api/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTasksbyuser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasksbyuser$Response(params: GetAllTasksbyuser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return getAllTasksbyuser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTasksbyuser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasksbyuser(params: GetAllTasksbyuser$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.getAllTasksbyuser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

}
